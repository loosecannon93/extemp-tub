  require 'rubygems' 
  require 'open-uri'
  require 'hpricot'
namespace :add_content do 
  task :msnbc => :environment do
  begin
    failed_docs = []
    msnbc_site = Site.find_by_name('MSNBC')
    for day in (Date.new(2010,7,30) .. Date.today)
      begin 
        puts "Opening article list from #{day}"
        fh = open("http://api.msnbc.msn.com/documents/getdocuments?contentType=ar&maxResults=1000&output=XML&startDate=#{day}&endDate=#{day}")
        puts 'Opened Article List'

        puts 'converted to Hripcot object'
        doc = Hpricot.XML(fh)
        puts 'converted'
        total = (doc/'Total').inner_html
        puts "iterating through #{total} documents"
        (doc/'Document').each_with_index do |ar,index|
          text = ''
        
	          begin
	          docid = (ar/'DocID').inner_html.to_i
	          if Article.find_by_docid(docid)
	            STDERR.puts "#{index} of #{total} : ERROR article #{docid} already in database"
	            next 
	          end
	          puts "#{index} of #{total} : opening document #{docid}"
	          handle = open((ar/'DocUri').inner_html)
	          article = Hpricot(handle)
              article.search('script').remove
              content = nil
              content ||= (article/'#fullstory').first
              content ||= (article/'.page .i1 .txt').first
              content ||= (article/'div#intelliTXT').first
           	  (content/'.ad-break').remove
           	  (content/'a').remove
              (content/'p').each {|p|text << p.inner_html}

              msnbc_site.articles.create!( 
                :title => (ar/'DocTitle').inner_html,
                :abstract => (ar/'DocAbstract').inner_html,
                :full_text => text,
                :published => Time.parse((ar/'DocPublished').inner_html),
                :placename => (ar/'Location'/'Placename').inner_html,
                :country   => (ar/'Location'/'Country').inner_html ,
                :zip => (ar/'Location'/'PostalCode').inner_html.to_i,
                :latitude => (ar/'Location'/'Latitude').inner_html.to_f,
                :longitude => (ar/'Location'/'Longitude').inner_html.to_f,
                :docid => docid,
                :url => (ar/'DocUri').inner_html
                )
                puts "   created  #{index} of #{total} "
	          rescue  OpenURI::HTTPError => e
	            STDERR.puts e
	          rescue NoMethodError => nme
	            STDERR.puts 'Whiny-nil'
	          rescue ActiveRecord::RecordInvalid => ri
	            STDERR.puts (ar/"DocUri").inner_html.to_s + 'Is already in database'
              next
            end
            
          end
        rescue EOFError
          failed_docs << [day]
        rescue
          STDERR.puts $!.message
          failed_docs << [day]
          next
        ensure  
          
        end
      end
      rescue
        raise
      ensure
        STDERR.puts puts failed_docs.inspect
      end
    end
  end

